@model IEnumerable<LMS_Project.ViewModels.CoursesVM>

<div ng-app="LMSApp" ng-controller="Course_Index_Ctrl" ng-init="getData()" ng-cloak>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <div class="left">
        <form class="glyphicon glyphicon-search" method="get">
            <input type="text" name="Search" ng-model="searchTerm" placeholder="Search Field" style="width:120px; height:25px;font-family: Helvetica, Arial, sans-serif">
        </form>
    </div>
    <table class="table">
        <tr>
            <th ng-click="orderByMe('Name')"><b>Course Name</b></th>
            <th ng-click="orderByMe('Subject.Name')"><b>Subject</b></th>
            <th ng-click="orderByMe('Teacher.UserName')"><b>Teacher</b></th>
        </tr>
        @{
            var url1 = Url.Action("Edit", new { ID = "{{course.ID}}" });
            url1 = HttpUtility.UrlDecode(url1);
        }
        @{
            var url2 = Url.Action("Details", new { ID = "{{course.ID}}" });
            url2 = HttpUtility.UrlDecode(url2);
        }
        @{
            var url3 = Url.Action("Delete", new { ID = "{{course.ID}}" });
            url3 = HttpUtility.UrlDecode(url3);
        }
        <tr ng-repeat="course in courses | orderBy:myOrderBy:reverse | filter:searchTerm ">
            <td>{{course.Name}}</td>
            <td>{{course.Subject.Name}}</td>
            <td>{{course.Teacher.UserName}}</td> <!--UserName is replaced with a fullName if the api is working-->
            <td>
                <a data-ng-href="@url1" ng-if="course.DocumentCount == 0 && course.Name!='' || course.ScheduleCount == 0">Edit</a>
                <a data-ng-href="@url2">Details</a>
                <a data-ng-href="@url3" ng-if="course.DocumentCount == 0 || course.ScheduleCount == 0">Remove</a>
            </td>
        </tr>
        <!--Replace the ng-repeat with this if we don't like angular - That means a new sorting system and search must be re created-->
        @*@foreach (var item in Model) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Subject.Name)
                    </td>
                    <td>
                        @Html.DisplayName(item.Teacher.ToString())
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
                        @Html.ActionLink("Details", "Details", new { id=item.ID }) |
                        @Html.ActionLink("Delete", "Delete", new { id=item.ID })
                    </td>
                </tr>
            }*@
    </table>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/angular")
    @Scripts.Render("~/bundles/angularcourses")
}